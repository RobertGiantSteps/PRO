-LISTAS-

Las listas permiten almacenar objetos mediante un orden definido y con posibilidad de duplicados. Las listas son estructuras de datos mutables, lo que significa que podemos añadir, 
eliminar o modificar sus elementos.

Creando listas

Una lista está compuesta por cero o más elementos. 
En Python debemos escribir estos elementos separados por comas y 
dentro de corchetes. 
Veamos algunos ejemplos de listas:
empty_list = []

languages = ['Python', 'Ruby', 'Javascript']

fibonacci = [0, 1, 1, 2, 3, 5, 8, 13]

data = ['Tenerife', {'cielo': 'limpio', 'temp': 24}, 3718, (28.2933947, -16.5226597)]



Nota

Una lista puede contener tipos de datos heterogéneos, 
lo que la hace una estructura de datos muy versátil.

Conversión

Para convertir otros tipos de datos en una lista podemos usar la función list():


# conversión desde una cadena de texto

list('Python')
['P', 'y', 't', 'h', 'o', 'n']

Si nos fijamos en lo que ha pasado, 
al convertir la cadena de texto Python se ha creado una lista con 6 elementos, 
donde cada uno de ellos representa un carácter de la cadena. 
Podemos extender este comportamiento a cualquier otro tipo de datos que permita ser iterado (iterables).
Otro ejemplo interesante de conversión puede ser la de los rangos. 
En este caso queremos obtener una lista explícita con los valores 
que constituyen el rango [0,9]:

list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

Lista vacía

Existe una manera particular de usar list() y es no pasarle ningún argumento. 
En este caso estaremos queriendo convertir el «vacío» en una lista, 
con lo que obtendremos una lista vacía:

list()
[]



Truco

Para crear una lista vacía, se suele recomendar el uso de [] frente a list(), 
no sólo por ser más pitónico sino por tener (en promedio) un mejor rendimiento en tiempos de ejecución.


Operaciones con listas

Obtener un elemento

Igual que en el caso de las cadenas de texto, 
podemos obtener un elemento de una lista a través del índice (lugar) que ocupa. 
Veamos un ejemplo:

shopping = ['Agua', 'Huevos', 'Aceite']

shopping[0]
'Agua'

shopping[1]
'Huevos'

shopping[2]
'Aceite'

shopping[-1]  # acceso con índice negativo
'Aceite'

El índice que usemos para acceder a los elementos de una lista tiene que estar comprendido entre los límites de la misma. Si usamos un índice antes del comienzo o después del final obtendremos un error (excepción):
>>>

shopping = ['Agua', 'Huevos', 'Aceite']

shopping[3]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range

Trocear una lista

El troceado de listas funciona de manera totalmente análoga al troceado de cadenas. 
Veamos algunos ejemplos:

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping[0:3]
['Agua', 'Huevos', 'Aceite']

shopping[:3]
['Agua', 'Huevos', 'Aceite']

shopping[2:4]
['Aceite', 'Sal']

shopping[-1:-4:-1]
['Limón', 'Sal', 'Aceite']

# Equivale a invertir la lista

shopping[::-1]
['Limón', 'Sal', 'Aceite', 'Huevos', 'Agua']

En el troceado de listas, a diferencia de lo que ocurre al obtener elementos, 
no debemos preocuparnos por acceder a índices inválidos (fuera de rango) ya que Python los restringirá a los límites de la lista:

shopping
['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping[10:]
[]

shopping[-100:2]
['Agua', 'Huevos']

shopping[2:100]
['Aceite', 'Sal', 'Limón']



Importante

Ninguna de las operaciones anteriores modifican la lista original, 
simplemente devuelven una lista nueva.

Invertir una lista

Python nos ofrece, al menos, 
tres mecanismos para invertir los elementos de una lista:

Conservando la lista original:
Opción 1: Mediante troceado de listas con step negativo:

shopping
['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping[::-1]
['Limón', 'Sal', 'Aceite', 'Huevos', 'Agua']


Opción 2: Mediante la función reversed():

shopping
['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

list(reversed(shopping))
['Limón', 'Sal', 'Aceite', 'Huevos', 'Agua']

Modificando la lista original:

Utilizando la función reverse() (nótese que es sin «d» al final):


shopping
['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping.reverse()

shopping
['Limón', 'Sal', 'Aceite', 'Huevos', 'Agua']

Añadir al final de la lista

Una de las operaciones más utilizadas en listas es añadir elementos al final de las mismas. 
Para ello Python nos ofrece la función append(). 
Se trata de un método destructivo que modifica la lista original:

shopping = ['Agua', 'Huevos', 'Aceite']

shopping.append('Atún')

shopping
['Agua', 'Huevos', 'Aceite', 'Atún']

Creando desde vacío¶

Una forma muy habitual de trabajar con listas es 
empezar con una vacía e ir añadiendo elementos poco a poco. 
Se podría hablar de un patrón creación.
Supongamos un ejemplo en el que queremos construir una lista con los números pares del [0,20):

even_numbers = []

for i in range(20):

    if i % 2 == 0:

        even_numbers.append(i)



even_numbers
[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]

Añadir en cualquier posición de una lista

Ya hemos visto cómo añadir elementos al final de una lista. 
Sin embargo, Python ofrece una función insert() que vendría a ser una generalización de la anterior, 
para incorporar elementos en cualquier posición. Simplemente debemos especificar el índice de inserción y el elemento en cuestión. 
También se trata de una función destructiva 2:

shopping = ['Agua', 'Huevos', 'Aceite']

shopping.insert(1, 'Jamón')

shopping
['Agua', 'Jamón', 'Huevos', 'Aceite']

shopping.insert(3, 'Queso')

shopping
['Agua', 'Jamón', 'Huevos', 'Queso', 'Aceite']



Nota

El índice que especificamos en la función insert() 
lo podemos intepretar como la posición delante (a la izquierda) 
de la cual vamos a colocar el nuevo valor en la lista.

Al igual que ocurría con el troceado de listas, 
en este tipo de inserciones no obtendremos un error si especificamos índices fuera de los límites de la lista. 
Estos se ajustarán al principio o al final en función del valor que indiquemos:

shopping = ['Agua', 'Huevos', 'Aceite']

shopping.insert(100, 'Mermelada')

shopping
['Agua', 'Huevos', 'Aceite', 'Mermelada']

shopping.insert(-100, 'Arroz')

shopping
['Arroz', 'Agua', 'Huevos', 'Aceite', 'Mermelada']

Consejo

Aunque es posible utilizar insert() para añadir elementos al final de una lista, 
siempre se recomienda usar append() por su mayor legibilidad:

values = [1, 2, 3]

values.append(4)

values
[1, 2, 3, 4]

values = [1, 2, 3]

values.insert(len(values), 4)  # don't do it!

values
[1, 2, 3, 4]

Repetir elementos

Al igual que con las cadenas de texto, 
el operador * nos permite repetir los elementos de una lista:


shopping = ['Agua', 'Huevos', 'Aceite']

shopping * 3
['Agua',
 'Huevos',
 'Aceite',
 'Agua',
 'Huevos',
 'Aceite',
 'Agua',
 'Huevos',
 'Aceite']

Combinar listas

Python nos ofrece dos aproximaciones para combinar listas:
Conservando la lista original:

    Mediante el operador + o +=:
    

shopping = ['Agua', 'Huevos', 'Aceite']

fruitshop = ['Naranja', 'Manzana', 'Piña']

shopping + fruitshop
['Agua', 'Huevos', 'Aceite', 'Naranja', 'Manzana', 'Piña']
 
Modificando la lista original:
    Mediante la función extend():

shopping = ['Agua', 'Huevos', 'Aceite']

fruitshop = ['Naranja', 'Manzana', 'Piña']

shopping.extend(fruitshop)

shopping
['Agua', 'Huevos', 'Aceite', 'Naranja', 'Manzana', 'Piña']

Hay que tener en cuenta que extend() funciona adecuadamente si pasamos una lista como argumento. 
En otro caso, quizás los resultados no sean los esperados. 
Veamos un ejemplo:

shopping = ['Agua', 'Huevos', 'Aceite']

shopping.extend('Limón')

shopping
['Agua', 'Huevos', 'Aceite', 'L', 'i', 'm', 'ó', 'n']

El motivo es que extend() «recorre» (o itera) sobre cada uno de los elementos del objeto en cuestión. 
En el caso anterior, al ser una cadena de texto, está formada por caracteres. 
De ahí el resultado que obtenemos.

Se podría pensar en el uso de append() para combinar listas. 
La realidad es que no funciona exactamente como esperamos; 
la segunda lista se añadiría como una sublista de la principal:

shopping = ['Agua', 'Huevos', 'Aceite']

fruitshop = ['Naranja', 'Manzana', 'Piña']

shopping.append(fruitshop)

shopping
['Agua', 'Huevos', 'Aceite', ['Naranja', 'Manzana', 'Piña']]


Modificar una lista

Del mismo modo que se accede a un elemento utilizando su índice, 
también podemos modificarlo:


shopping = ['Agua', 'Huevos', 'Aceite']

shopping[0]
'Agua'

shopping[0] = 'Jugo'

shopping
['Jugo', 'Huevos', 'Aceite']

En el caso de acceder a un índice no válido de la lista, 
incluso para modificar, obtendremos un error:


shopping[100] = 'Chocolate'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list assignment index out of range

Modificar con troceado

No sólo es posible modificar un elemento de cada vez, 
sino que podemos asignar valores a trozos de una lista:

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping[1:4]
['Huevos', 'Aceite', 'Sal']

shopping[1:4] = ['Atún', 'Pasta']

shopping
['Agua', 'Atún', 'Pasta', 'Limón']



Nota

La lista que asignamos no necesariamente debe tener la misma longitud que el trozo que sustituimos.



Borrar elementos

Python nos ofrece, al menos, cuatro formas para borrar elementos en una lista:

Por su índice:

    Mediante la sentencia del:

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    del shopping[3]
    
    shopping
    ['Agua', 'Huevos', 'Aceite', 'Limón']

Por su valor:

    Mediante la función remove():
    

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping.remove('Sal')

shopping
['Agua', 'Huevos', 'Aceite', 'Limón']



Advertencia

Si existen valores duplicados, 
la función remove() sólo borrará la primera ocurrencia.


Por su índice (con extracción):

    La sentencia del y la función remove() efectivamente borran el elemento indicado de la lista, pero no «devuelven» 3 nada. 
    Sin embargo, Python nos ofrece la función pop() que además de borrar, nos «recupera» el elemento; algo así como una extracción. 
    Lo podemos ver como una combinación de acceso + borrado:

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    shopping.pop()
    'Limón'
    
    shopping
    ['Agua', 'Huevos', 'Aceite', 'Sal']
    
    shopping.pop(2)
    'Aceite'
    
    shopping
    ['Agua', 'Huevos', 'Sal']



    Nota

    Si usamos la función pop() sin pasarle ningún argumento, 
    por defecto usará el índice -1, es decir, el último elemento de la lista. 
    Pero también podemos indicarle el índice del elemento a extraer.


    Por su rango:

    Mediante troceado de listas:


shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping[1:4] = []

shopping
['Agua', 'Limón']


Borrado completo de la lista

Python nos ofrece, al menos, dos formas para borrar una lista por completo:

    Utilizando la función clear():

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    shopping.clear()  # Borrado in-situ
    
    shopping
    []


    Reinicializando» la lista a vacío con []:
    >>>
    
    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']
    
    shopping = []  # Nueva zona de memoria
    
    shopping
    []

    La diferencia entre ambos métodos tiene que ver con cuestiones internas de gestión de memoria y de rendimiento:
    
    
    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']
    
    id(shopping)
    4416018560
    
    shopping.clear()
    
    id(shopping)  # se mantiene la misma "posición de memoria"
    4416018560
    
    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']
    
    id(shopping)
    4458688576
    
    shopping = []
    
    id(shopping)  # se crea una nueva "posición de memoria"
    4458851520


    Encontrar un elemento

    Si queremos descubrir el índice que corresponde a un determinado valor dentro la lista 
    podemos usar la función index() para ello:

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    shopping.index('Huevos')
1

Tener en cuenta que si el elemento que buscamos no está en la lista, 
obtendremos un error:

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

shopping.index('Pollo')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 'Pollo' is not in list




Nota

Si buscamos un valor que existe más de una vez en una lista, 
la función index() sólo nos devolverá el índice de la primera ocurrencia.


Pertenencia de un elemento

Si queremos comprobar la existencia de un determinado elemento en una lista, 
podríamos buscar su índice, 
pero la forma pitónica de hacerlo es utilizar el operador in:

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

'Aceite' in shopping
True

'Pollo' in shopping
False



Nota

El operador in siempre devuelve un valor booleano, 
es decir, verdadero o falso.


Número de ocurrencias

Para contar cuántas veces aparece un determinado valor 
dentro de una lista podemos usar la función count():


sheldon_greeting = ['Penny', 'Penny', 'Penny']

sheldon_greeting.count('Howard')
0

sheldon_greeting.count('Penny')


Convertir lista a cadena de texto

Dada una lista, podemos convetirla a una cadena de texto, 
uniendo todos sus elementos mediante algún separador. 
Para ello hacemos uso de la función join() con la siguiente estructura

Estructura de llamada a la función join()

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

','.join(shopping)
'Agua,Huevos,Aceite,Sal,Limón'

' '.join(shopping)
'Agua Huevos Aceite Sal Limón'

'|'.join(shopping)
'Agua|Huevos|Aceite|Sal|Limón'


Hay que tener en cuenta que join() 
sólo funciona si todos sus elementos son cadenas de texto:

', '.join([1, 2, 3, 4, 5])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sequence item 0: expected str instance, int found


Truco
Esta función join() es realmente la opuesta a la de split() para dividir una cadena.

Ordenar una lista

Python proporciona, al menos, dos formas de ordenar los elementos de una lista:

Conservando lista original:

    Mediante la función sorted() que devuelve una nueva lista ordenada:

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    sorted(shopping)
    ['Aceite', 'Agua', 'Huevos', 'Limón', 'Sal']

    Modificando la lista original:

    Mediante la función sort():

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    shopping.sort()
    
    shopping
    ['Aceite', 'Agua', 'Huevos', 'Limón', 'Sal']

    Ambos métodos admiten un parámetro «booleano» reverse 
    para indicar si queremos que la ordenación se haga en sentido inverso:

    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

    sorted(shopping, reverse=True)
    ['Sal', 'Limón', 'Huevos', 'Agua', 'Aceite']

    Longitud de una lista

    Podemos conocer el número de elementos que tiene una lista con la función len():
  
    
    shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']
    
    len(shopping)
    5

ITERARA UNA LISTA(OJO)


Al igual que hemos visto con las cadenas de texto, también podemos 
iterar sobre los elementos de una lista utilizando la sentencia for:

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

for product in shopping:

    print(product)


Agua
Huevos
Aceite
Sal
Limón



Nota

También es posible usar la sentencia break en este tipo de bucles para abortar su ejecución en algún momento que nos interese.


ITERAR USANDO ENUMERACION(OJO)

Hay veces que no sólo nos interesa «visitar» cada uno de los elementos de una lista, 
sino que también queremos saber su índice dentro de la misma. 
Para ello Python nos ofrece la función enumerate():

shopping = ['Agua', 'Huevos', 'Aceite', 'Sal', 'Limón']

for i, product in enumerate(shopping):

    print(i, product)


0 Agua
1 Huevos
2 Aceite
3 Sal
4 Limón




Truco

Es posible utilizar el parámetro start con enumerate() 
para indicar el índice en el que queremos comenzar. Por defecto es 0.

ITERAR SOBRE MULTIPLES LISTAS

Python ofrece la posibilidad de iterar sobre 
múltiples listas en paralelo utilizando la función zip():

shopping = ['Agua', 'Aceite', 'Arroz']

details = ['mineral natural', 'de oliva virgen', 'basmati']

for product, detail in zip(shopping, details):

    print(product, detail)


Agua mineral natural
Aceite de oliva virgen
Arroz basmati




Nota

En el caso de que las listas no tengan la misma longitud, 
la función zip() realiza la combinación hasta que se agota la lista más corta.


Dado que zip() produce un iterador, si queremos obtener una lista explícita con la combinación en paralelo de las listas, debemos construir dicha lista de la siguiente manera:


shopping = ['Agua', 'Aceite', 'Arroz']

details = ['mineral natural', 'de oliva virgen', 'basmati']

list(zip(shopping, details))
[('Agua', 'mineral natural'),
 ('Aceite', 'de oliva virgen'),
 ('Arroz', 'basmati')]


 Comparar listas

 Supongamos este ejemplo:

 
 [1, 2, 3] < [1, 2, 4]
 True
 Python llega a la conclusión de que la 
 lista [1, 2, 3] es menor que [1, 2, 4] 
 porque va comparando elemento a elemento:



 El 1 es igual en ambas listas.

 El 2 es igual en ambas litas.

 El 3 es menor que el 4, por lo que la primera lista es menor que la segunda.


 Entender la forma en la que se comparan dos listas es importante para poder 
 aplicar otras funciones y obtener los resultados deseados.



 Ver también
 Esta comparación funciona de forma totalmente análoga a la comparación de cadenas de texto.
 
 Cuidado con las copias

 Las listas son estructuras de datos mutables y esta característica nos obliga a tener cuidado cuando realizamos copias de listas, 
 ya que la modificación de una de ellas puede afectar a la otra.
 Veamos un ejemplo sencillo:

 original_list = [4, 3, 7, 1]

 copy_list = original_list
 
 original_list[0] = 15
 
 original_list
 [15, 3, 7, 1]
 
 copy_list
 [15, 3, 7, 1]




 Nota

 A través de Python Tutor se puede ver 
 claramente el motivo de por qué ocurre esto. 
 Dado que las variables «apuntan» a la misma zona de memoria, 
 al modificar una de ellas, el cambio también se ve reflejado en la otra.
 
 Una posible solución a este problema es hacer una «copia dura». 
 Para ello Python proporciona la función copy():


 original_list = [4, 3, 7, 1]

 copy_list = original_list.copy()
 
 original_list[0] = 15
 
 original_list
 [15, 3, 7, 1]
 
 copy_list
 [4, 3, 7, 1]

 Existe otra aproximación a este problema, y es utilizar un troceado completo de la lista, lo que nos devuelve una «copia desvinculada» de manera implícita:

 
 original_list = [4, 3, 7, 1]
 
 copy_list = original_list[:]
 
 id(original_list) != id(copy_list)
 True

 Truco

 En el caso de que estemos trabajando con listas que contienen elementos mutables, debemos hacer uso de 
 la función deepcopy() dentro del módulo copy de la librería estándar.

sys.argv

Cuando queramos ejecutar un programa Python desde línea de comandos, 
tendremos la posibilidad de acceder a los argumentos de dicho programa. 
Para ello se utiliza una lista que la encontramos dentro del módulo sys y que se denomina argv:


Veamos una aplicación de lo anterior en un programa que convierte un número 
decimal a una determinada base, 
ambos argumentos pasados por línea de comandos:

import sys

number = int(sys.argv[1])
tobase = int(sys.argv[2])

match tobase:
    case 2:
        result = f'{number:b}'
    case 8:
        result = f'{number:o}'
    case 16:
        result = f'{number:x}'
    case _:
        result = None

if result is None:
    print(f'Base {tobase} not implemented!')
else:
    print(result)

    Si lo ejecutamos obtenemos lo siguiente:

    python dec2base.py 65535 2
    1111111111111111

    Funciones matemáticas¶

    Python nos ofrece, entre otras 4, 
    estas tres funciones matemáticas básicas que se pueden aplicar sobre listas.

    Suma de todos los valores:

    Mediante la función sum():
  

data = [5, 3, 2, 8, 9, 1]

sum(data)
28

Mínimo de todos los valores:

    Mediante la función min():
   

data = [5, 3, 2, 8, 9, 1]

min(data)
1

Máximo de todos los valores:

    Mediante la función max():


data = [5, 3, 2, 8, 9, 1]

max(data)
9


LISTAS DE LISTAS:

A continuación planteamos un ejemplo del mundo deportivo. 
Un equipo de fútbol suele tener una disposición en el campo organizada en líneas 
de jugadores. En aquella alineación con la que España ganó la copa del mundo 
en 2010 había una disposición 4-3-3 con los siguientes jugadores:

Veamos una posible representación de este equipo de fútbol usando una lista 
compuesta de listas. 
Primero definimos cada una de las líneas:

goalkeeper = 'Casillas'

defenders = ['Capdevila', 'Piqué', 'Puyol', 'Ramos']

midfielders = ['Xavi', 'Busquets', 'X. Alonso']

forwards = ['Iniesta', 'Villa', 'Pedro']

Y ahora las juntamos en una única lista:

team = [goalkeeper, defenders, midfielders, forwards]

team
['Casillas',
 ['Capdevila', 'Piqué', 'Puyol', 'Ramos'],
 ['Xavi', 'Busquets', 'X. Alonso'],
 ['Iniesta', 'Villa', 'Pedro']]

 Podemos comprobar el acceso a distintos elementos:

 team[0]  # portero
 'Casillas'
 
 team[1][0]  # lateral izquierdo
 'Capdevila'
 
 team[2]  # centrocampistas
 ['Xavi', 'Busquets', 'X. Alonso']
 
 team[3][1]  # delantero centro
 'Villa'

